# CyberOps Docker Network Configuration
# This file defines the detailed network architecture for the CyberOps system with
# optimized security and performance settings.
#
# USAGE INSTRUCTIONS:
# This file is intended to be used in advanced deployment scenarios where more granular
# network segmentation is required than what is provided in the standard docker-compose.yml.
#
# To use this configuration:
# 1. First create the networks defined in this file:
#    docker-compose -f docker-network.yml up
#
# 2. Then start your services using the standard docker-compose.yml, which will connect
#    to these pre-created networks:
#    docker-compose up
#
# Alternatively, for Docker Swarm deployments:
#    docker stack deploy -c docker-network.yml -c docker-compose.yml cyberops
#
# SECURITY CONSIDERATIONS:
# - The backend network is marked as 'internal' to prevent direct external access
# - Each network has specific security settings appropriate for its purpose
# - IP masquerading is disabled for internal networks where possible
# - Inter-container communication (ICC) is restricted where appropriate
# - Custom DNS servers are configured for reliable name resolution
#
# PERFORMANCE CONSIDERATIONS:
# - MTU settings are optimized for better network performance
# - Network driver options are tuned for the specific use case of each network
# - Connection pooling is enabled for database networks
#
# MESSAGING ARCHITECTURE:
# - The orchestrator service runs both the web UI and the TaskScheduler in the same container
# - The TaskScheduler runs in a background thread and processes scheduled tasks
# - Message consumers for RabbitMQ/Kafka are initialized in the orchestrator service
# - For high-volume message processing, dedicated consumer containers can be deployed
#   (see the commented message-consumer service in docker-compose.yml)
# - All message consumers connect to the cyberops-backend network to access the message brokers
#
# NOTE: The standard docker-compose.yml defines basic networks (cyberops-frontend, 
# cyberops-backend, cyberops-scan-network) for simple deployments. This file provides
# more granular network segmentation (osint, security, monitoring) for advanced security
# requirements and complex deployments.

version: '3.8'

# Define the networks for the CyberOps system
networks:
  # Frontend network for user-facing services
  cyberops-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
    # Network security options
    driver_opts:
      com.docker.network.bridge.name: cyberops-frontend
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"

  # Backend network for internal services (databases, message brokers)
  cyberops-backend:
    driver: bridge
    internal: true  # Not accessible from outside Docker
    ipam:
      config:
        - subnet: 172.29.0.0/16
    # Network security options
    driver_opts:
      com.docker.network.bridge.name: cyberops-backend
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "false"

  # OSINT tools network
  cyberops-osint:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
    # Network security options
    driver_opts:
      com.docker.network.bridge.name: cyberops-osint
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"

  # Security tools network
  cyberops-security:
    driver: bridge
    ipam:
      config:
        - subnet: 172.31.0.0/16
    # Network security options
    driver_opts:
      com.docker.network.bridge.name: cyberops-security
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"

  # Monitoring network
  cyberops-monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.32.0.0/16
    # Network security options
    driver_opts:
      com.docker.network.bridge.name: cyberops-monitoring
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"

  # Message broker network (for dedicated message consumers if needed)
  cyberops-messaging:
    driver: bridge
    internal: true  # Not accessible from outside Docker
    ipam:
      config:
        - subnet: 172.33.0.0/16
    # Network security options
    driver_opts:
      com.docker.network.bridge.name: cyberops-messaging
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "false"

# Default network configurations for tools
x-network-config:
  # Default configuration for OSINT tools
  osint-tool-networks: &osint-tool-networks
    networks:
      - cyberops-osint
      - cyberops-backend
    dns:
      - 8.8.8.8
      - 1.1.1.1

  # Default configuration for security tools
  security-tool-networks: &security-tool-networks
    networks:
      - cyberops-security
      - cyberops-backend
    dns:
      - 8.8.8.8
      - 1.1.1.1

  # Default configuration for monitoring tools
  monitoring-tool-networks: &monitoring-tool-networks
    networks:
      - cyberops-monitoring
      - cyberops-backend
    dns:
      - 8.8.8.8
      - 1.1.1.1
      
  # Default configuration for message consumers
  messaging-tool-networks: &messaging-tool-networks
    networks:
      - cyberops-messaging
      - cyberops-backend
    dns:
      - 8.8.8.8
      - 1.1.1.1
